#!/usr/bin/env python3
import json
import logging
import os
import re
import subprocess
import sys
import base64
import signal
import time

STARTUP_PATH = sys.argv[1]

logging.basicConfig(
    level=logging.INFO,
    stream=sys.stdout,
    format='%(levelname)s: %(message)s',
)

def app_init_start():
    if os.environ.get('CF_INSTANCE_INDEX'):
        instanceType = os.environ.get('CF_INSTANCE_INDEX')
        if instanceType == "0":
            if 'APPINIT_CONSTANT' in os.environ:
                timeout = time.time() + 60
                AppInitConstantName = os.environ.get('APPINIT_CONSTANT')
                logging.info("AppInitConstantName detected, wait for init files copy: " + AppInitConstantName)
                file_path = '/tmp/startinit'
                while not os.path.exists(file_path):
                    if time.time() > timeout:
                        break
                    time.sleep(5)
                env_var = os.environ
                for key in env_var:
                    if key == AppInitConstantName:
                        AppInitPath = env_var[key]
                
                logging.info("AppInitConstantName detected, copy of files done to: " + AppInitPath)
                if os.path.exists(AppInitPath):
                    logging.info("Init copy files dir exists: " + AppInitPath)
                    for initFile in os.listdir(AppInitPath):
                        logging.info("init file: " + initFile)
                else:
                    logging.info("Init copy files dir does NOT exists: " + AppInitPath)
            else:
                logging.info("APPINIT_CONSTANT not detected, proceed with default startup")
        else:
            logging.info("Slave instance, not performing initialization, CF_INSTANCE_INDEX=" + instanceType)

def export_db_endpoint():
    if 'DATABASE_ENDPOINT' in os.environ:
        os.environ['DATABASE_URL'] = os.environ['DATABASE_ENDPOINT']
    else:
        if 'DATABASE_URL' not in os.environ:
            logging.warning(
            'DATABASE_ENDPOINT environment variable not found.'
            'Fallback to custom runtime variables https://github.com/mendix/cf-mendix-buildpack/#configuring-custom-runtime-settings')
            

def export_vcap_variables():
    logging.debug("Executing build_vcap_variables...")

    vcap_application = create_vcap_application()
    logging.debug("Set environment variable VCAP_APPLICATION: \n {0}"
        .format(vcap_application))
    os.environ['VCAP_APPLICATION'] = vcap_application

def create_vcap_application():
    logging.debug("Executing create_vcap_application...")
    vcap_application_data = open("vcap_application.json").read()
    return vcap_application_data
  
def export_k8s_instance():
    logging.debug("Checking Kubernetes environment...")
    kubernetes_host = os.environ.get('KUBERNETES_SERVICE_HOST')
    if kubernetes_host is not None:
        hostname = os.environ.get('HOSTNAME')
        instance_match = re.search('(?<=-)[0-9]+$', hostname)
        if instance_match is not None:
            instance_number = instance_match.group(0)
            logging.info("Setting CF_INSTANCE_INDEX to {0} based on hostname {1}"
                .format(instance_number, hostname))
            os.environ['CF_INSTANCE_INDEX'] = instance_number
            
def export_encoded_cacertificates():
    logging.debug("Checking for encoded CA certificates...")
    certificate_authorities_base64 = os.environ.get('CERTIFICATE_AUTHORITIES_BASE64')
    if certificate_authorities_base64 is not None:
        logging.info("Decoding encoded CA certificates into CERTIFICATE_AUTHORITIES environment variable")
        certificate_authorities = base64.b64decode(certificate_authorities_base64)
        os.environ['CERTIFICATE_AUTHORITIES'] = str(certificate_authorities,'utf-8')

def sigchld_handler(_signo, _stack_frame):
    # reap zombies
    logging.debug("Child process has exited, getting result")
    (waitpid, result) = os.waitpid(-1, os.WNOHANG)
    logging.debug("Child process %s has exited with result %s" % (waitpid, result))
    
def call_buildpack_startup():
    logging.debug("Executing call_buildpack_startup...")

    signal.signal(signal.SIGCHLD, sigchld_handler)

    proc = subprocess.Popen(["python3", STARTUP_PATH], cwd='/build')
    
    # Forward SIGTERM to allow a clean shutdown
    def sig_forwarder(_signo, _stack_frame):
        logging.debug("Forwarding SIGTERM to child process")
        os.kill(proc.pid, _signo)
    
    signal.signal(signal.SIGTERM, sig_forwarder)

    proc.wait()

def get_welcome_header():
    welcome_ascii_header = '''
                              ##        .
                         ## ## ##       ==
                       ## ## ## ##      ===
                   /""""""""""""""""\___/ ===
              ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
                   \______ o          __/
                     \    \        __/
                      \____\______/

     __  __        _  _     _____             _
    |  \/  |      | || |   |  __ \           | |
    | \  / |_  __ | || |_  | |  | | ___   ___| | _____ _ __
    | |\/| \ \/ / |__   _| | |  | |/ _ \ / __| |/ / _ \ '__|
    | |  | |>  <     | |   | |__| | (_) | (__|   <  __/ |
    |_|  |_/_/\_\    |_|   |_____/ \___/ \___|_|\_\___|_|

                                digitalecosystems@mendix.com


    '''
    return welcome_ascii_header


if __name__ == '__main__':
    logging.info(get_welcome_header())
    app_init_start()
    export_db_endpoint()    
    export_vcap_variables()
    export_k8s_instance()
    
    export_encoded_cacertificates()
    call_buildpack_startup()
    sys.exit(0)
